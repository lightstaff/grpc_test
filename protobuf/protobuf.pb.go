// Code generated by protoc-gen-gogo.
// source: protobuf/protobuf.proto
// DO NOT EDIT!

/*
	Package protobuf is a generated protocol buffer package.

	It is generated from these files:
		protobuf/protobuf.proto

	It has these top-level messages:
		Empty
		ReqModel
		ReplyModel
*/
package protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "github.com/gogo/protobuf/gogoproto"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

import io "io"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Empty struct {
}

func (m *Empty) Reset()                    { *m = Empty{} }
func (m *Empty) String() string            { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()               {}
func (*Empty) Descriptor() ([]byte, []int) { return fileDescriptorProtobuf, []int{0} }

type ReqModel struct {
	Message string `protobuf:"bytes,1,opt,name=message,proto3" json:"message,omitempty"`
}

func (m *ReqModel) Reset()                    { *m = ReqModel{} }
func (m *ReqModel) String() string            { return proto.CompactTextString(m) }
func (*ReqModel) ProtoMessage()               {}
func (*ReqModel) Descriptor() ([]byte, []int) { return fileDescriptorProtobuf, []int{1} }

type ReplyModel struct {
	Result string `protobuf:"bytes,1,opt,name=result,proto3" json:"result,omitempty"`
}

func (m *ReplyModel) Reset()                    { *m = ReplyModel{} }
func (m *ReplyModel) String() string            { return proto.CompactTextString(m) }
func (*ReplyModel) ProtoMessage()               {}
func (*ReplyModel) Descriptor() ([]byte, []int) { return fileDescriptorProtobuf, []int{2} }

func init() {
	proto.RegisterType((*Empty)(nil), "gprc_test.Empty")
	proto.RegisterType((*ReqModel)(nil), "gprc_test.ReqModel")
	proto.RegisterType((*ReplyModel)(nil), "gprc_test.ReplyModel")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for GRPCTestServcie service

type GRPCTestServcieClient interface {
	GetHello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReplyModel, error)
	UpperCharacters(ctx context.Context, opts ...grpc.CallOption) (GRPCTestServcie_UpperCharactersClient, error)
}

type gRPCTestServcieClient struct {
	cc *grpc.ClientConn
}

func NewGRPCTestServcieClient(cc *grpc.ClientConn) GRPCTestServcieClient {
	return &gRPCTestServcieClient{cc}
}

func (c *gRPCTestServcieClient) GetHello(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*ReplyModel, error) {
	out := new(ReplyModel)
	err := grpc.Invoke(ctx, "/gprc_test.GRPCTestServcie/GetHello", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *gRPCTestServcieClient) UpperCharacters(ctx context.Context, opts ...grpc.CallOption) (GRPCTestServcie_UpperCharactersClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_GRPCTestServcie_serviceDesc.Streams[0], c.cc, "/gprc_test.GRPCTestServcie/UpperCharacters", opts...)
	if err != nil {
		return nil, err
	}
	x := &gRPCTestServcieUpperCharactersClient{stream}
	return x, nil
}

type GRPCTestServcie_UpperCharactersClient interface {
	Send(*ReqModel) error
	Recv() (*ReplyModel, error)
	grpc.ClientStream
}

type gRPCTestServcieUpperCharactersClient struct {
	grpc.ClientStream
}

func (x *gRPCTestServcieUpperCharactersClient) Send(m *ReqModel) error {
	return x.ClientStream.SendMsg(m)
}

func (x *gRPCTestServcieUpperCharactersClient) Recv() (*ReplyModel, error) {
	m := new(ReplyModel)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for GRPCTestServcie service

type GRPCTestServcieServer interface {
	GetHello(context.Context, *Empty) (*ReplyModel, error)
	UpperCharacters(GRPCTestServcie_UpperCharactersServer) error
}

func RegisterGRPCTestServcieServer(s *grpc.Server, srv GRPCTestServcieServer) {
	s.RegisterService(&_GRPCTestServcie_serviceDesc, srv)
}

func _GRPCTestServcie_GetHello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GRPCTestServcieServer).GetHello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gprc_test.GRPCTestServcie/GetHello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GRPCTestServcieServer).GetHello(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _GRPCTestServcie_UpperCharacters_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(GRPCTestServcieServer).UpperCharacters(&gRPCTestServcieUpperCharactersServer{stream})
}

type GRPCTestServcie_UpperCharactersServer interface {
	Send(*ReplyModel) error
	Recv() (*ReqModel, error)
	grpc.ServerStream
}

type gRPCTestServcieUpperCharactersServer struct {
	grpc.ServerStream
}

func (x *gRPCTestServcieUpperCharactersServer) Send(m *ReplyModel) error {
	return x.ServerStream.SendMsg(m)
}

func (x *gRPCTestServcieUpperCharactersServer) Recv() (*ReqModel, error) {
	m := new(ReqModel)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _GRPCTestServcie_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gprc_test.GRPCTestServcie",
	HandlerType: (*GRPCTestServcieServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetHello",
			Handler:    _GRPCTestServcie_GetHello_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "UpperCharacters",
			Handler:       _GRPCTestServcie_UpperCharacters_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "protobuf/protobuf.proto",
}

func (m *Empty) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Empty) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	return i, nil
}

func (m *ReqModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReqModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Message) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtobuf(dAtA, i, uint64(len(m.Message)))
		i += copy(dAtA[i:], m.Message)
	}
	return i, nil
}

func (m *ReplyModel) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalTo(dAtA)
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ReplyModel) MarshalTo(dAtA []byte) (int, error) {
	var i int
	_ = i
	var l int
	_ = l
	if len(m.Result) > 0 {
		dAtA[i] = 0xa
		i++
		i = encodeVarintProtobuf(dAtA, i, uint64(len(m.Result)))
		i += copy(dAtA[i:], m.Result)
	}
	return i, nil
}

func encodeFixed64Protobuf(dAtA []byte, offset int, v uint64) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	dAtA[offset+4] = uint8(v >> 32)
	dAtA[offset+5] = uint8(v >> 40)
	dAtA[offset+6] = uint8(v >> 48)
	dAtA[offset+7] = uint8(v >> 56)
	return offset + 8
}
func encodeFixed32Protobuf(dAtA []byte, offset int, v uint32) int {
	dAtA[offset] = uint8(v)
	dAtA[offset+1] = uint8(v >> 8)
	dAtA[offset+2] = uint8(v >> 16)
	dAtA[offset+3] = uint8(v >> 24)
	return offset + 4
}
func encodeVarintProtobuf(dAtA []byte, offset int, v uint64) int {
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return offset + 1
}
func (m *Empty) Size() (n int) {
	var l int
	_ = l
	return n
}

func (m *ReqModel) Size() (n int) {
	var l int
	_ = l
	l = len(m.Message)
	if l > 0 {
		n += 1 + l + sovProtobuf(uint64(l))
	}
	return n
}

func (m *ReplyModel) Size() (n int) {
	var l int
	_ = l
	l = len(m.Result)
	if l > 0 {
		n += 1 + l + sovProtobuf(uint64(l))
	}
	return n
}

func sovProtobuf(x uint64) (n int) {
	for {
		n++
		x >>= 7
		if x == 0 {
			break
		}
	}
	return n
}
func sozProtobuf(x uint64) (n int) {
	return sovProtobuf(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *Empty) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Empty: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Empty: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtobuf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReqModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReqModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReqModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Message", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobuf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Message = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtobuf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *ReplyModel) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtobuf
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ReplyModel: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ReplyModel: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Result", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= (uint64(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtobuf
			}
			postIndex := iNdEx + intStringLen
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Result = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtobuf(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if skippy < 0 {
				return ErrInvalidLengthProtobuf
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtobuf(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtobuf
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
			return iNdEx, nil
		case 1:
			iNdEx += 8
			return iNdEx, nil
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtobuf
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			iNdEx += length
			if length < 0 {
				return 0, ErrInvalidLengthProtobuf
			}
			return iNdEx, nil
		case 3:
			for {
				var innerWire uint64
				var start int = iNdEx
				for shift := uint(0); ; shift += 7 {
					if shift >= 64 {
						return 0, ErrIntOverflowProtobuf
					}
					if iNdEx >= l {
						return 0, io.ErrUnexpectedEOF
					}
					b := dAtA[iNdEx]
					iNdEx++
					innerWire |= (uint64(b) & 0x7F) << shift
					if b < 0x80 {
						break
					}
				}
				innerWireType := int(innerWire & 0x7)
				if innerWireType == 4 {
					break
				}
				next, err := skipProtobuf(dAtA[start:])
				if err != nil {
					return 0, err
				}
				iNdEx = start + next
			}
			return iNdEx, nil
		case 4:
			return iNdEx, nil
		case 5:
			iNdEx += 4
			return iNdEx, nil
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
	}
	panic("unreachable")
}

var (
	ErrInvalidLengthProtobuf = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtobuf   = fmt.Errorf("proto: integer overflow")
)

func init() { proto.RegisterFile("protobuf/protobuf.proto", fileDescriptorProtobuf) }

var fileDescriptorProtobuf = []byte{
	// 254 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x12, 0x2f, 0x28, 0xca, 0x2f,
	0xc9, 0x4f, 0x2a, 0x4d, 0xd3, 0x87, 0x31, 0xf4, 0xc0, 0x0c, 0x21, 0xce, 0xf4, 0x82, 0xa2, 0xe4,
	0xf8, 0x92, 0xd4, 0xe2, 0x12, 0x29, 0xdd, 0xf4, 0xcc, 0x92, 0x8c, 0xd2, 0x24, 0xbd, 0xe4, 0xfc,
	0x5c, 0xfd, 0xf4, 0xfc, 0xf4, 0x7c, 0xb8, 0x52, 0x30, 0x0f, 0xcc, 0x01, 0xb3, 0x20, 0x3a, 0x95,
	0xd8, 0xb9, 0x58, 0x5d, 0x73, 0x0b, 0x4a, 0x2a, 0x95, 0x54, 0xb8, 0x38, 0x82, 0x52, 0x0b, 0x7d,
	0xf3, 0x53, 0x52, 0x73, 0x84, 0x24, 0xb8, 0xd8, 0x73, 0x53, 0x8b, 0x8b, 0x13, 0xd3, 0x53, 0x25,
	0x18, 0x15, 0x18, 0x35, 0x38, 0x83, 0x60, 0x5c, 0x25, 0x15, 0x2e, 0xae, 0xa0, 0xd4, 0x82, 0x9c,
	0x4a, 0x88, 0x3a, 0x31, 0x2e, 0xb6, 0xa2, 0xd4, 0xe2, 0xd2, 0x9c, 0x12, 0xa8, 0x32, 0x28, 0xcf,
	0xa8, 0x97, 0x91, 0x8b, 0xdf, 0x3d, 0x28, 0xc0, 0x39, 0x24, 0xb5, 0xb8, 0x24, 0x38, 0xb5, 0xa8,
	0x2c, 0x39, 0x33, 0x55, 0xc8, 0x94, 0x8b, 0xc3, 0x3d, 0xb5, 0xc4, 0x23, 0x35, 0x27, 0x27, 0x5f,
	0x48, 0x40, 0x0f, 0xee, 0x5e, 0x3d, 0xb0, 0xed, 0x52, 0xa2, 0x48, 0x22, 0x08, 0x0b, 0x94, 0x18,
	0x84, 0x9c, 0xb9, 0xf8, 0x43, 0x0b, 0x0a, 0x52, 0x8b, 0x9c, 0x33, 0x12, 0x8b, 0x12, 0x93, 0x4b,
	0x52, 0x8b, 0x8a, 0x85, 0x84, 0x51, 0xd4, 0x42, 0x9c, 0x8c, 0xd3, 0x00, 0x0d, 0x46, 0x03, 0x46,
	0x27, 0xb9, 0x13, 0x0f, 0xe5, 0x18, 0x4e, 0x3c, 0x92, 0x63, 0xbc, 0xf0, 0x48, 0x8e, 0xf1, 0xc1,
	0x23, 0x39, 0xc6, 0x19, 0x8f, 0xe5, 0x18, 0xa2, 0x38, 0x60, 0x21, 0x93, 0xc4, 0x06, 0x66, 0x19,
	0x03, 0x02, 0x00, 0x00, 0xff, 0xff, 0xb1, 0xdb, 0x1a, 0xb1, 0x60, 0x01, 0x00, 0x00,
}
